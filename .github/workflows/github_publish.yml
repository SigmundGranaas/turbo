name: Build and Release Flutter App

on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.4'
          channel: 'stable'
          cache: true

      - name: Get Flutter dependencies
        run: flutter pub get

      # ----- REVISED SIGNING STEPS -----
      - name: Create Keystore and Signing Properties
        run: |
          echo "Decoding keystore..."
          echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 --decode > android/app/release.jks
          echo "Keystore decoded."
          
          echo "Creating key.properties file..."
          echo "storePassword=${{ secrets.RELEASE_KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.RELEASE_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.RELEASE_KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=release.jks" >> android/key.properties
          echo "key.properties created."

      - name: Get App Version
        id: get_version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2)
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV

      # Use the version in the build name and the run number for the build number
      - name: Build Release APK
        run: flutter build apk --release --build-name=${{ env.APP_VERSION }} --build-number=${{ github.run_number }} --split-per-abi

      - name: Find and Rename APKs
        run: |
          # Create a directory to hold the final APKs
          mkdir -p release-artifacts
          # Find all release APKs and move/rename them
          find build/app/outputs/flutter-apk -name 'app-*-release.apk' -exec mv {} release-artifacts/ \;
          ls -R release-artifacts

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.APP_VERSION }}-${{ github.run_number }}
          name: Release v${{ env.APP_VERSION }} build ${{ github.run_number }}
          generate_release_notes: true
          # Upload all files from the artifacts directory
          files: release-artifacts/*