name: Build and Release Flutter App

on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.4'
          channel: 'stable'
          cache: true

      - name: Get Flutter dependencies
        run: flutter pub get

      # ----- NEW STEPS FOR SIGNING -----
      - name: Decode and install the keystore
        run: |
          echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 --decode > android/app/release.jks

      - name: Build APK with signing
        run: |
          flutter build apk --release \
            --build-name=${{ env.APP_VERSION }} \
            --build-number=${{ github.run_number }} \
            --obfuscate --split-debug-info=./debug-info \
            --target-platform android-arm,android-arm64,android-x64 \
            --split-per-abi
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}

      # The build command above produces multiple APKs. We need to package them.
      - name: Package artifacts
        run: |
          mkdir -p release-apks
          mv build/app/outputs/flutter-apk/app-arm64-v8a-release.apk release-apks/
          mv build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk release-apks/
          mv build/app/outputs/flutter-apk/app-x86_64-release.apk release-apks/
          
          # Optional: Zip the debug info for crash reporting (e.g., Sentry, Firebase Crashlytics)
          # zip -r debug-info.zip ./debug-info

      - name: Extract app version
        id: get_version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2)
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.APP_VERSION }}.${{ github.run_number }}
          name: Release ${{ env.APP_VERSION }}
          generate_release_notes: true
          # Upload all APKs in the directory
          files: |
            release-apks/*.apk
            # Optional:
            # debug-info.zip